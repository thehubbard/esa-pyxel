# Normal install      : pip install .
# Development install : pip install -e .
# Build project       : python -m build . --wheel --sdist
[build-system]
requires = ["setuptools>=63", "versioneer[toml]==0.28", "wheel"]
build-backend = "setuptools.build_meta"

# https://peps.python.org/pep-0621
[project]
requires-python = ">= 3.9"
name = "pyxel_sim"
description = "Pyxel detector simulation framework."
readme = "README.md"
authors = [{"name" = "The Pyxel development team", "email" = "pyxel@esa.int" }]
license = { text = "MIT" }
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Topic :: Scientific/Engineering :: Physics",
    "Typing :: Typed",
]
keywords = ["ESA", "data modeling", "sensors", "calibration", "CCD",
    "CMOS", "active sensors", "electronics"]
dependencies = [
    # Scientific computing
    "numba",
    "numpy>=1.21",
    "pandas",
    "scipy",
    "xarray>=2022.06",
    "xarray-datatree>=0.0.12",
    "sep",

    # Plotting
    "matplotlib>=3.1",
    "seaborn",
    "holoviews>=1.15.0",
    "bokeh",

    # Parallel computing
    "dask",
    "distributed",

    # Jupyter notebook
    "ipywidgets>=7.5",

    # Input/Output
    "astropy>=4.3",
    "fsspec>=2021",
    "aiohttp",  # for fsspec
    "h5py",
    "h5netcdf",
    "pyyaml",
    "xlrd",
    "openpyxl",
    "netcdf4",

    # Others
    "attrs>=21.3.0",
    "click!=8.1.4,!=8.1.5",
    "tqdm",
    "typing-extensions",
    "pympler",
    "pillow",
    "scikit-image",
    "astroquery",
    "specutils",
    "synphot",
]
dynamic = ["version"]

[project.urls]
homepage = "https://esa.gitlab.io/pyxel/"
documentation = "https://esa.gitlab.io/pyxel/doc/"
repository = "https://gitlab.com/esa/pyxel"
changelog = "https://gitlab.com/esa/pyxel/-/releases"
tracker = "https://gitlab.com/esa/pyxel/issues"

[project.optional-dependencies]
calibration = [ "pygmo>=2.16.1" ]
model = [
    "poppy>=1.1.0",
    "lacosmic"
]
io = [ "asdf" ]
all = [
    "pyxel-sim[calibration]",
    "pyxel-sim[model]",
    "pyxel-sim[io]",
]

[project.scripts]
pyxel = "pyxel.run:main"

[tool.versioneer]
VCS = "git"
style = "pep440"
versionfile_source = "pyxel/_version.py"
versionfile_build = "pyxel/_version.py"
tag_prefix = ""

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
# where = []
#exclude = [
#    "docs*",
#    "tests*",
#]

[tool.setuptools.package-data]
pyxel_sim = ["py.typed"]
exclude = [
    "contrib",
    "docs",
    "tests",
    "examples",
]

[tool.isort]
profile = "black"
# add_imports = "from __future__ import annotations"
skip = ["__init__.py", "versioneer.py", ".ipynb_checkpoints",
    "src", ".tox", ".eggs", ".venv", "build", "dist"]

[tool.mypy]
# disallow_untyped_calls = true
# disallow_untyped_defs = true
# disallow_incomplete_defs = true
# disallow_untyped_decorators = true
no_implicit_optional = true
warn_unreachable = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = false
# warn_return_any = true
# check_untyped_defs = true
check_untyped_defs = true
# no_implicit_reexport = true

[[tool.mypy.overrides]]
module = [
    "pyxel._version",
    "arcticpy.*",
    "asdf.*",
    "astropy.*",
    "cloudpickle.*",
    "dask.*",
    "distributed.*",
    "fsspec.*",
    "jsonschema.*",
    "h5py.*",
    "lacosmic.*",
    "matplotlib.*",
    "mpl_toolkits.*",
    "numba.*",
    "numpy.*",
    "pandas.*",
    "poppy",
    "pygmo",
    "pympler.*",
    "PIL",
    "IPython.*",
    "scipy.*",
    "scopesim.*",
    "sep.*",
    "toolz.*",
    "tqdm.*",
    "xarray.*",
    "skimage.*",
    "holoviews.*",
    "bokeh.*",
    "jinja2.*",
    "click.*",
    "astroquery.gaia.*",
    "specutils.*",
    "synphot.*",
]
ignore_errors=  true
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = [
    "--showlocals",
    "--capture=no",
    "-vv",
    "--ignore=old_code"
]

[tool.pydocstyle]
convention = "numpy"
match = "(?!_version).*.py"
add_ignore = "D202,D105,D102,D103"

[tool.doc8]
ignore = ["D001", "D002", "D004", "D005"]

[tool.bandit]
exclude_dirs = ["pyxel/_version.py"]

[tool.codespell]
ignore-words-list = "acn,sade,te"
skip = "pyxel/_version.py,*.fits"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "debug",
    "raise NotImplementedError",
]

[tool.coverage.run]
omit = [
    "pyxel/models/charge_measurement/nghxrg/nghxrg_beta.py",
    "pyxel/models/charge_generation/tars/plotting.py",
]

[tool.ruff]
select = [
    "A",        # flake8-builtins
    "B",        # flake8-bugbear
    "E",        # pycodestyle
    "F",        # pyflakes
    "D",        # pydocstyle
    "G",        # flake8-logging-format
    # "SIM",      # flake8-simplify
    "W",        # pycodestyle
    # "PD",       # pandas-vet
    # "S",        # bandit
    "PTH",      # Flake8 use Pathlib
    "PT",       # Flake8-pytest-style
    "RUF",      # Ruff-specific rules
    "TCH",      # Flake8 Type Checking
    "TRY",      # Tryceratops
    "C90",      # McCabe
    "N",        # pep8-naming
]
ignore = [
    "E501",     # Omit 'Line too long'
    "D102",     # Missing docstring in public method
    "D103",     # Missing docstring in public function
    "D105",     # Missing docstring in magic method
    "D202",     # No blank lines
    "RUF002",   # Docstring contains ambiguous unicode character
    "RUF003",   # ambiguous unicode character
    "TCH003",   # Move standard library import in a type-checking block
    "TRY003",   # Avoid specifying long messages outside the exception class
    "TRY301",   # Abstract `raise` to an inner function
    "PTH207",   # Replace 'glob' with 'Path.glob' or 'Path.rglob'
]

exclude = ["_TEMPLATE.py", "_version.py"]

[tool.ruff.per-file-ignores]
"tests/*" = [
    "D100",     # Missing docstring in public module
    "D104",     # Missing docstring in public package
    "N803",     # Argument name should be lowercase
    "PT006",    # Wrong name(s) type in '@pytest.mark.parametrize'
]

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false


[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.mccabe]
max-complexity = 12
