# Tox (https://testrun.org/tox) is a tool for running tests
# Install:
#   pip install tox
# Run:
#   tox
#   tox -av                 # Show list of all defined environments
#   tox -l                  # Show list of test environments
#   tox -e mypy
#   tox -e build
#   tox -p                  # Run all tests in parallel
#   tox -e py-basic         # Run unit tests
#   tox -e py310-basic      # Run unit tests
#   tox -e py-cov-basic     # Run unit tests
#   tox -e py310-cov-basic  # Run unit tests

[tox]
minversion = 4
envlist = py310-basic,flake8,ruff,mypy,doc8,pydocstyle,codespell,docs,check_json_schema
skip_missing_interpreters = true

[testenv]
package = wheel           # Build and install .whl
wheel_build_env = .pkg    # Share the same build environment

[testenv:py{39,310,311}-{basic,extra_model,extra_calibration,extra_all}]
description = Tests without coverage
deps =
    pytest
    pytest-httpserver
    pytest-mock
    freezegun
    jsonschema
    scikit-image  # used by lacosmic
    statsmodels   # used for 'linear_regression'
extras =
    basic: model
    basic: io
    extra_model: model
    extra_calibration: calibration
    extra_all: all
commands =
    pytest --color=yes

[testenv:py{39,310,311}-cov-{basic,extra_model,extra_calibration,extra_all}]
description = Tests without coverage
deps =
    {[testenv:py311-basic]deps}
    pytest-cov
extras =
    basic: model
    basic: io
    extra_model: model
    extra_calibration: calibration
    extra_all: all
commands =
    coverage run -m pytest
    coverage report
    coverage xml
    coverage html

[testenv:flake8]
skip_install = true
deps =
    flake8
    pep8-naming
    flake8-bugbear
    tryceratops!=2.2.*, !=2.3.*
commands =
    flake8 pyxel

[testenv:ruff]
skip_install = true
deps = ruff>=0.0.281
commands = ruff pyxel tests

[testenv:pydocstyle]
skip_install = true
deps =
    pydocstyle[toml]>=4
commands =
    pydocstyle pyxel

[testenv:mypy]
deps =
    mypy>=0.910
    types-requests
    types-PyYAML
    types-cryptography
commands =
    mypy pyxel

[testenv:refurb]
deps =
    refurb
commands =
    refurb pyxel

[testenv:codespell]
skip_install = true
deps =
    codespell
    tomli
commands =
    codespell pyxel docs/source

[testenv:json_schema]
deps =
    -r continuous_integration/scripts/requirements.txt
commands =
    python continuous_integration/scripts/create_json_schema.py -f continuous_integration/scripts/auto_generated.py
    python continuous_integration/scripts/auto_generated.py -f static/pyxel_schema.json

[testenv:check_json_schema]
deps =
    -r continuous_integration/scripts/requirements.txt
commands =
    python continuous_integration/scripts/create_json_schema.py -f continuous_integration/scripts/auto_generated.py
    python continuous_integration/scripts/auto_generated.py -f static/pyxel_schema.json --check


[testenv:doc8]
skip_install = true
deps =
    sphinx
    doc8
commands =
  doc8 --ignore-path docs/source/license.rst docs/source

# Documentation
[testenv:docs]
setenv =
    PYTHONPATH = {toxinidir}
extras =
    model
deps =
    -rdocs/requirements-docs.txt
commands =
     sphinx-build -E -W -b html docs/source docs/html

[testenv:faq]
description = Generate file 'docs/source/about/FAQ.md'
skip_install = true
deps =
    faqtory
commands =
    faqtory build -c docs/faq.yml

[testenv:serve-docs]
basepython = python3
skip_install = true
changedir = docs/html
deps =
commands =
    python -m http.server {posargs}

[testenv:bandit]
skip_install = true
deps =
    bandit
commands =
    bandit -r pyxel -f screen --ini .bandit

[testenv:licenses]
skip_install = true
deps =
    scancode-toolkit
    click == 7.1.2
    gemfileparser2 == 0.9.0
commands =
    scancode --verbose --license --copyright \
             --ignore "*.fits" --ignore "*.npy" --ignore "*.ascii" --ignore "*.data" \
             --ignore "*.txt" --ignore "*.cfg" --ignore "*.pyc" --ignore ".DS_Store" \
             --html license.html pyxel

# Build wheel file
[testenv:build]
skip_install = true
deps =
    build
commands =
    ; Create wheel (.whl) and source archive (.tar.gz) files.
    python -m build . --wheel --sdist

# Release to 'pypi' with 'tox -e release'
# Release to 'test.pypi' with 'tox -e release -- --repository testpypi'
[testenv:release]
description = Release to Pypi
skip_install = true
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY_URL
deps =
    {[testenv:build]deps}
    twine >= 1.11.0
allowlist_externals =
    rm
commands =
    rm -rf dist

    {[testenv:build]commands}

    twine check dist/*
    twine upload --verbose {posargs} --skip-existing dist/*
