import typing as t
from pathlib import Path
import collections
from . import Geometry
from . import Material, Environment, Characteristics
from ..data_structure.photon import Photon
from ..data_structure.charge import Charge
from ..data_structure.pixel import Pixel
from ..data_structure.signal import Signal
from ..data_structure.image import Image
import numpy as np

class Detector:
    def __init__(
        self,
        geometry: Geometry,
        material: Material,
        environment: Environment,
        characteristics: Characteristics,
        photon: t.Optional[Photon] = ...,
        charge: t.Optional[Charge] = ...,
        pixel: t.Optional[Pixel] = ...,
        signal: t.Optional[Signal] = ...,
        image: t.Optional[Image] = ...,
    ): ...
    geometry: Geometry = ...
    material: Material = ...
    environment: Environment = ...
    characteristics: Characteristics = ...
    photon: Photon = ...
    charge: Charge = ...
    pixel: Pixel = ...
    signal: Signal = ...
    image: Image = ...

    # other parameters
    header: collections.OrderedDict = ...
    input_image = ...
    output_dir: Path = ...
    start_time: float = ...
    end_time: float = ...
    steps: int = ...
    time_step: float = ...
    time: float = ...
    dynamic: bool = ...
    non_destructive: bool = ...
    read_out: bool = ...
    all_time_steps: np.ndarray = ...
    def initialize(self, reset_all: bool = ...) -> None: ...
    def set_output_dir(self, path: t.Optional[t.Union[str, Path]] = ...) -> None: ...
    def set_dynamic(
        self, time_step: float, steps: int, ndreadout: bool = ...
    ) -> None: ...
    @property
    def is_dynamic(self) -> bool: ...
    @property
    def is_non_destructive_readout(self) -> bool: ...
    @property
    def e_thermal_velocity(self) -> float: ...
    def elapse_time(self) -> float: ...
