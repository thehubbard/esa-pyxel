# ########################################################### #
# Pyxel detector simulation framework                         #
#                                                             #
# Example yaml configuration file                             #
# Calibrate CDM CTI model with target image                   #
# Created by D. Lucsanyi (ESA)                                #
# ########################################################### #

simulation:

  mode: calibration

#  mode: parametric
#  parametric:
#    parametric_mode: sequential
#    parameters:
#      - key: detector.characteristics.sv
#        values: numpy.unique(numpy.linspace(1.e-6, 1.e-3, 10, dtype=float))

  calibration:
    calibration_mode:     pipeline
    result_type:          pixel
    result_fit_range:     [537, 835, 0, 1]
    result_input_arguments:
      - key: pipeline.charge_generation.charge_profile.arguments.txt_file
        values: [data/flex_calib/flex_input/input_flex_ds7_ch0_1ke.txt,
                 data/flex_calib/flex_input/input_flex_ds7_ch0_3ke.txt,
                 data/flex_calib/flex_input/input_flex_ds7_ch0_7ke.txt]

    target_data_path:    ['data/flex_calib/flex_target_data/target_flex_ds7_ch0_1ke.txt',
                          'data/flex_calib/flex_target_data/target_flex_ds7_ch0_3ke.txt',
                          'data/flex_calib/flex_target_data/target_flex_ds7_ch0_7ke.txt']
    target_fit_range:     [537, 835, 0, 1]

    seed:                 22222
    islands:              3
    fitness_function:
      func:               pyxel.calibration.fitness.sum_of_abs_residuals
      arguments:
    algorithm:
      type:               sade
      generations:        50
      population_size:    200
      variant:            2
    parameters:
      - key:              pipeline.charge_transfer.cdm.arguments.beta_p
        values:           _
        logarithmic:      false
        boundaries:       [0.1, 0.9]
      - key:              pipeline.charge_transfer.cdm.arguments.tr_p
        values:           [_, _, _]
        logarithmic:      true
        boundaries:       [1.e-5, 1.e-1]
      - key:              pipeline.charge_transfer.cdm.arguments.nt_p
        values:           [_, _, _]
        logarithmic:      true
        boundaries:       [1.e-3, 1.e+1]

  outputs:
    output_folder:        'outputs'
#    save_data_to_file:
#      - detector.image.array:   [fits]
    calibration_plot:
      champions_plot:
      population_plot:
        columns: [3, 5]
      fitting_plot:

ccd_detector:

  geometry:

    row:   835                  # pixel
    col:   1                    # pixel
    total_thickness: 40.        # um
    pixel_vert_size: 10.        # um
    pixel_horz_size: 10.        # um

  material:
    material: 'silicon'

  environment:
    temperature: 300        # K

  characteristics:
    qe: 0.5                 # -
    eta: 1.                 # e/photon
    sv: 1.0e-6              # V/e
    amp: 0.8                # V/V
    a1: 100.                # V/V
    a2: 65536               # DN/V
    fwc: 900000             # e
    fwc_serial: 1000000     # e
    vg: 1.6200e-10          # cm^2
    svg: 1.6200e-10         # cm^2
    t: 9.4722e-04           # s
    st: 9.4722e-04          # s

pipeline:

  # -> photon
  photon_generation:

  # photon -> photon
  optics:

  # photon -> charge
  charge_generation:
    - name: charge_profile
      func: pyxel.models.charge_generation.load_profile.charge_profile
      enabled: true
      arguments:
        txt_file: _ # Changing this via Calibration module!
        fit_profile_to_det: true

  # charge -> pixel
  charge_collection:
    - name: simple_collection
      func: pyxel.models.charge_collection.collection.simple_collection
      enabled: true

  # pixel -> pixel
  charge_transfer:
    - name: cdm
      func: pyxel.models.charge_transfer.cdm.cdm
      enabled: true
      arguments:
        parallel_cti: true
        serial_cti: false
        charge_injection: true
        beta_p: 0.3                    # calibrating this parameter
        beta_s: 0.3
        tr_p: [5.e-3]
        tr_s: [2.e-3]
        nt_p: [100.]
        nt_s: [50.]
        sigma_p: [1.e-15]
        sigma_s: [1.e-15]

  # pixel -> signal
  charge_measurement:
    - name: simple_measurement
      func: pyxel.models.charge_measurement.measurement.simple_measurement
      enabled: true

  # signal -> image
  readout_electronics:
    - name: simple_amplifier
      func: pyxel.models.readout_electronics.amplification.simple_amplifier
      enabled: true
    - name: simple_digitization
      func: pyxel.models.readout_electronics.digitization.simple_processing
      enabled: true
