# ###############
### Pyxel configuration file for CCD detectors
### David Lucsanyi
# ###############

simulation:

  mode: single
#  mode: parametric
#  mode: calibration

  parametric:
#    parametric_mode: sequential
    parametric_mode: embedded
#    parametric_mode: image_generator
    steps:
      -
        enabled: true
        key: pipeline.charge_generation.tars.arguments.particle_number
        values: [2, 3]
      -
        enabled: true
        key: pipeline.photon_generation.photon_level.arguments.level
        values: range(10, 13)
      -
        enabled: false
        key:  [['characteristics', 'cdm', 'output_node_noise'],
              [['amp'], ['tr_p', 'nt_p', 'sigma_p', 'beta_p'], ['std_deviation']],
              [[1], [4, 4, 4, 1], [1]]]
        values: 'pyxel/calibration_champions.out'

  calibration:
    calibration_mode:   single_model # pipeline  #

    output_type: pixel # image   # signal
    output_fit_range: [0, 2, 0, 2] #[10, 30, 20, 50] #

    target_data_path: ['outputs/in.fits'] # data/results.fits']     #  <*.npy> <*.fits> <ascii>
    target_fit_range: [0, 2, 0, 2] #[10, 30, 20, 50]
#    weighting_path: ['data/results.fits']

    fitness_function:
#      func: tests.unittests.test_fitting.custom_fitness_func
      func: pyxel.calibration.fitness.sum_of_abs_residuals
      arguments:

    seed: 132
    algorithm:
      type: sade   # sga  # nlopt
#      nlopt_solver: sbplx  # neldermead
      generations: 2
      population_size: 10
      variant: 2

    model_names:         ['cdm']
    variables:           [['tr_p', 'nt_p', 'sigma_p', 'beta_p']]
    params_per_variable: [[4, 4, 4, 1]]
    var_log:             [[True, True, True, False]]
    lower_boundary:      [[1.e-3, 1.e-2, 1.e-20, 0.]]
    upper_boundary:      [[2., 1.e+1, 1.e-15, 1.]]

#    model_names:         ['characteristics', 'cdm', 'output_node_noise', 'environment']
#    variables:           [['amp'], ['tr_p', 'nt_p', 'sigma_p', 'beta_p'], ['std_deviation'], ['temperature']]
#    params_per_variable: [[1], [4, 4, 4, 1], [1], [1]]
#    var_log:             [[False], [True, True, True, False], [False], [False]]
#    lower_boundary:      [[1.], [1.e-3, 1.e-2, 1.e-20, 0.], [10.], [100.]]
#    upper_boundary:      [[10.], [2., 1.e+1, 1.e-15, 1.], [20.], [300.]]

#    results:
    champions_file: 'data/calibration_champions.out'
    population_file: 'data/calibration_populations.out'


detector:
  class: pyxel.detectors.ccd.CCD

  geometry:
    class: pyxel.detectors.ccd_geometry.CCDGeometry

    row:   100                   # compulsory
    col:   100                     # compulsory
    total_thickness: 40.0          # um
    pixel_vert_size: 10. #10.0         # um
    pixel_horz_size: 10. #10.0  #30.   # um

#      readout_nodes: 1    # channels
#      image_area:
#        row:   5
#        col:   10
#      parallel_overscan:
#        type: physical  # virtual
#        row:   3
#        col:   10
#      serial_underscan:
#        type: physical  # virtual
#        row:   8
#        col:   2
#      serial_overscan:
#        type: physical  # virtual
#        row:   8
#        col:   4

  material:
    class: pyxel.detectors.material.Material
    material: 'silicon'
#      compound: 'silicon'
#        element: 'silicon'
#        ratio: 1.
    n_acceptor: 0.0               # cm-3
    n_donor: 0.0                  # cm-3

  environment:
    class: pyxel.detectors.environment.Environment
#      temperature: 300                     # K
#      total_ionising_dose: 0              #
#      total_non_ionising_dose: 0          #

  characteristics:
    class: pyxel.detectors.ccd_characteristics.CCDCharacteristics
    qe: 0.5                 # -
    eta: 0.5                # e/photon
    sv: 1.0e-6              # V/e
    amp: 1.                 # V/V
    a1: 100.                # V/V
    a2: 65536               # DN/V
    fwc: 1000000            # e
    fwc_serial: 1000000     # e
    vg: 1.6200e-10          # cm2
    svg: 1.6200e-10         # cm2
    t: 9.4722e-04           # s
    st: 9.4722e-04          # s
#      bias_voltage: 0.0        # V

pipeline:
  class: pyxel.pipelines.ccd_pipeline.CCDDetectionPipeline

  # -> photons
  photon_generation:
    - name: load_image
      func: pyxel.models.photon_generation.load_image.load_image
      enabled: true
      arguments:
        image_file: outputs/in.fits # data/01.fits
        fit_image_to_det: false
        convert_to_photons: true
    - name: photon_level
      func: pyxel.models.photon_generation.add_photons.add_photons
      enabled: false
      arguments:
          level: 10
    - name: shot_noise
      func: pyxel.models.photon_generation.shot_noise.shot_noise
      enabled: false

  # photons -> photons
  optics:

  # photons -> charge
  charge_generation:

    -
      name: photoelectrons
      func: pyxel.models.charge_generation.photoelectrons.simple_conversion
      enabled: true
    -
      name: tars
      func: pyxel.models.charge_generation.tars.tars.run_tars
      enabled: true
      arguments:
        simulation_mode: cosmic_ray   # snowflakes
        running_mode: stepsize  # stopping  # plotting  # geant4
        particle_type: proton
        initial_energy: 100.   # MeV
        particle_number: 1
        incident_angles:      # rad
        starting_position:    # um
        spectrum_file: 'pyxel/models/charge_generation/tars/data/inputs/proton_L2_solarMax_11mm_Shielding.txt'
    -
      name: charge_injection
      func: pyxel.models.charge_generation.charge_injection.charge_injection
      enabled: false
      arguments:
        input_data_list: #path

  # charge -> charge
  charge_collection:
    -
      name: fixed_pattern_noise
      func: pyxel.models.charge_collection.fix_pattern_noise.fix_pattern_noise
      enabled: false
      arguments:
        pix_non_uniformity: data/non_uniformity_array_normal_random_dist.data
    -
      name: full_well
      func: pyxel.models.charge_collection.full_well.simple_pixel_full_well
      enabled: false
    -
      name: simple_collection
      func: pyxel.models.charge_collection.collection.simple_collection
      enabled: true

  # charge -> charge
  charge_transfer:
    -
      name: cdm
      func: pyxel.models.charge_transfer.cdm.CDM.cdm
      enabled: true
      arguments:
       beta_p: 0.1
       beta_s: 0.3
       parallel_cti: true
       serial_cti: false
       chg_inj: true
       para_transfers: 1552
       tr_p: [0.01]
       tr_s: [0.01]
       nt_p: [1.]
       nt_s: [1.]
       sigma_p: [1.]
       sigma_s: [1.]

  # charge -> signal
  charge_measurement:
    -
      name: simple_measurement
      func: pyxel.models.charge_measurement.measurement.simple_measurement
      enabled: true
    -
      name: output_node_noise
      func: pyxel.models.charge_measurement.readout_noise.output_node_noise
      enabled: false
      arguments:
        std_deviation: 40.    # TODO too high

  # signal -> image
  readout_electronics:
    -
      name: simple_amplifier
      func: pyxel.models.readout_electronics.amplification.simple_amplifier
      enabled: true
    -
      name: simple_digitization
      func: pyxel.models.readout_electronics.digitization.simple_digitization
      enabled: true
      arguments:
        data_type: numpy.uint16
