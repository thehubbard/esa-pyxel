#
# Notes: $CI_COMMIT_REF_NAME => master or branch-xyz
#

# variables:
#    PYPI_USER: SECURE
#    PYPI_PASSWORD: SECURE
#    CONTAINER_LATEST_IMAGE: gitlab.esa.int:4567/sci-fv/pyxel:latest

variables:
  # Change pip's cache directory to be inside the project directory.
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache"


stages:
  - test
  - build
  - deploy


before_script:
  - python -V
  - pip install tox
  - export TZ=Europe/Amsterdam
  - date

# Use for temporary storage for project dependencies(e.g. pypi packages...)
cache:
  paths:
    - .cache/

# ###########################
# Test Stage
# ###########################

# Run pytest + coverage and create html report (pytest_report.html)
#anaconda3:
#  image: continuumio/anaconda3:latest
#  stage: test
#  script:
#    - pwd
#    - ls
#    - python -V
#    - python3 -V
#    - which python3
#    - pip install pytest
#    - pip install -r requirements.txt
#    - pip install -e ".[all]"
#    - pip freeze
#    - export PYTHONPATH=$PWD  # todo ?
#    - pytest
#  allow_failure: true


# Run pytest for Python 3.7
python373:
  image: python:3.7.3   # todo: should be 3.7, but tox or pytest or python3.7.4 causes segmentation fault
  stage: test
  script:
    - python -V
    - pip install tox
    - tox -e py37-extra_all


# Run pytest for Python 3.6
python36:
  image: python:3.6
  stage: test
  script:
    - python -V
    - pip install tox
    - tox -e py36-extra_all


# Run mypy
mypy:
  image: python:3.7
  stage: test
  script:
    - python -V
    - pip install tox
    - tox -e mypy


# Run pylint (with pytest) and generate HTML report
# lint:
#   image: python:3
#   stage: test
#   script:
#     - pip install pytest-pylint pytest-html
#     - pip install -r requirements.txt
#     - pip install -e ".[all]"
#     - pip freeze
#     - pytest --pylint --color=yes --verbose --pylint-rcfile=pylint.cfg --html=pylint_report.html --self-contained-html -m pylint || true
#     - ls
#   artifacts:
#     paths:
#       - pylint_report.html
#   allow_failure: true


flake8:
  image: python:3
  stage: test
  script:
    - python -V
    - pip install tox
    - tox -e flake8


pydocstyle:
  image: python:3
  stage: test
  script:
    - python -V
    - pip install tox
    - tox -e pydocstyle


doc8:
  image: python:3
  stage: test
  script:
    - python -V
    - pip install tox
    - tox -e doc8


# ###########################
# Build stage
# ###########################

## create badges
#badges:
#  image: python:3
#  stage: build
#  script:
#    - tail -n 1 coverage.out > cov_total.out
#    - PERCENT=$(awk '{printf "%.2f", ($2-$3)/$2*100}' cov_total.out)
#    - python badges.py -cov=$PERCENT
#    - ls
#  artifacts:
#    paths:
#      - coverage.svg
#  allow_failure: false

# Run pytest + coverage and create html report (pytest_report.html)
coverage:
  image: python:3.6
  stage: build
  script:
    - pip install pytest pytest-cov pytest-html
    - pip install -r requirements.txt
    - pip install -e ".[all]"
    - pytest --cov=pyxel --cov-report= --cov-report=html --html=pytest_report.html --self-contained-html --color=yes --full-trace --showlocals --verbose
    - coverage report > coverage.out
  artifacts:
    paths:
      - htmlcov
      - pytest_report.html
      - coverage.out

# Scan sourcecode for licenses, copyrights & dependencies
# experimental, latest version
licenses-latest:
  image: python:2.7.15
  stage: build
  allow_failure: true
  script:
    - python --version
    - pwd
    - pip install scancode-toolkit
    - pip freeze
    - scancode --help
    - scancode --examples
    - ls
    - scancode -n 4 --verbose --ignore "*.fits" --ignore "*.npy" --ignore "*.ascii" --ignore "*.data" --ignore "*.txt" --ignore "*.cfg" --license --copyright --json-pp license.json /builds/sci-fv/pyxel-mirror/pyxel || true
    - ls
  artifacts:
    paths:
      - license.json

# Scan sourcecode for licenses, copyrights & dependencies
#licenses:
#  image: python:2.7.14
#  stage: build
#  allow_failure: true
#  script:
#    - pwd
#    - pip install scancode-toolkit==2.2.1    # worked
#    - pip freeze
#    - scancode --help
#    - scancode -n 4 --ignore *.fits --ignore *.npy --format html-app --diag . license_report.html    # v2.2.1   worked
#    - ls
#  artifacts:
#    paths:
#      - license_report_files
#      - license_report.html

# Generate the Sphinx documentation into 'doc/html'
doc:
  image: python:3.7
  stage: build
  script:
    - pip install tox
    - tox -e docs
    - python badges.py -doc="passed"
  artifacts:
    paths:
      - docs/html
      - documentation.svg
#  only:
#    - master

website:
  image: alpine
  stage: build
  script:
    - wget https://esa.gitlab.io/pyxel-website/pyxel-website.tar.gz
    - tar -xzvf pyxel-website.tar.gz
    - ls html
  artifacts:
    paths:
       - html
  only:
    - master

## Generate the Sphinx documentation into 'doc/html'
#doc:
#  image: python:3.6
#  stage: build
#  script:
#    - pip install -r docs/requirements-docs.txt
#    - pip install -r requirements.txt
#    - pip install -e ".[all]"
#    - pip install doc8
#    - export PYTHONPATH=$PWD
#    - doc8 docs/source
#    - sphinx-build docs/source docs/html -E -a -j 4
#    - python badges.py -doc="passed"
#  artifacts:
#    paths:
#      - docs/html
#      - documentation.svg
#  allow_failure: false
#  only:
#    - master

#docker:
#  stage: build
#  image: docker:dind
#  script:
#    - echo $CONTAINER_LATEST_IMAGE
#    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN gitlab.esa.int:4567
#    - docker build -t gitlab.esa.int:4567/sci-fv/pyxel-mirror .
#    - docker push gitlab.esa.int:4567/sci-fv/pyxel-mirror
##    - docker login -u david.lucsanyi -p $TOKEN gitlab.esa.int:4567   # TODO  (personal) key/token needed
##    - docker tag gitlab.esa.int:4567/sci-fv/pyxel-mirror:latest registry.gitlab.com/esa/pyxel:latest
##    - docker push registry.gitlab.com/esa/pyxel
#
##    - docker build --pull -t $CONTAINER_LATEST_IMAGE .
##    - docker push $CONTAINER_LATEST_IMAGE
##    - docker tag $CONTAINER_LATEST_IMAGE registry.gitlab.com/esa/pyxel
#  allow_failure: true
#  only:
#    - master

# ###########################
# Deploy Stage
# ###########################

## Create the pages
#pages:
#  image: python:3
#  stage: deploy
#  script:
#    - mkdir public
#    - mv docs/html public/doc
#    - mv htmlcov public/coverage
#    - mv pytest_report.html public
#    # - mv pylint_report.html public
#    - mv documentation.svg public
#    - mv license.json public
#    - ls public
#  artifacts:
#    paths:
#      - public
#  allow_failure: false

# Create the pages
pages:
  image: python:3.6
  stage: deploy
  script:
    - mkdir public
    - mv docs/html public/doc         # Generated by stage 'doc'
    - [ -f html] && mv html/* public  # Generated by stage 'website'
    - mv documentation.svg public     # Generated by stage 'doc'
    - ls public
  artifacts:
    paths:
      - public
  allow_failure: false
#  only:
#    - master