variables:
  # Change pip's cache directory to be inside the project directory.
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache"

  # Set tags for docker images
  DOCKER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  DOCKER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest

stages:
  - test
  - build
  - deploy

before_script:
  - python -V
  - pip install tox
  - export TZ=Europe/Amsterdam
  - date

# Use for temporary storage for project dependencies(e.g. pypi packages...)
cache:
  paths:
    - .cache/

# ###########################
# Test Stage
# ###########################

# Run pytest + coverage and create html report (pytest_report.html)
#anaconda3:
#  image: continuumio/anaconda3:latest
#  stage: test
#  script:
#    - pwd
#    - ls
#    - python -V
#    - python3 -V
#    - which python3
#    - pip install pytest
#    - pip install -r requirements.txt
#    - pip install -e ".[all]"
#    - pip freeze
#    - export PYTHONPATH=$PWD  # todo ?
#    - pytest
#  allow_failure: true


# Run pytest for Python 3.7 without anaconda
python37:
  image: python:3.7
  stage: test
  script:
    - tox -e py37-extra_all
  rules:
    # If `$FORCE_GITLAB_CI` is set, create a pipeline.
    - if: '$FORCE_GITLAB_CI'

# Run pytest for Python 3.8 without anaconda
python38:
  image: python:3.8
  stage: test
  script:
    - tox -e py38-extra_all
  rules:
    # If `$FORCE_GITLAB_CI` is set, create a pipeline.
    - if: '$FORCE_GITLAB_CI'

# Run pytest for Python 3.8 without anaconda
python38_numpy119:
  image: python:3.8
  stage: test
  script:
    - tox -e py38-numpy119-extra_all
  rules:
    # If `$FORCE_GITLAB_CI` is set, create a pipeline.
    - if: '$FORCE_GITLAB_CI'


# Run mypy
mypy:
  image: python:3
  stage: test
  script:
    - tox -e mypy
  rules:
    # If `$FORCE_GITLAB_CI` is set, create a pipeline.
    - if: '$FORCE_GITLAB_CI'


# Run pylint (with pytest) and generate HTML report
# lint:
#   image: python:3
#   stage: test
#   script:
#     - pip install pytest-pylint pytest-html
#     - pip install -r requirements.txt
#     - pip install -e ".[all]"
#     - pip freeze
#     - pytest --pylint --color=yes --verbose --pylint-rcfile=pylint.cfg --html=pylint_report.html --self-contained-html -m pylint || true
#     - ls
#   artifacts:
#     paths:
#       - pylint_report.html
#   allow_failure: true


flake8:
  image: python:3
  stage: test
  script:
    - tox -e flake8
  rules:
    # If `$FORCE_GITLAB_CI` is set, create a pipeline.
    - if: '$FORCE_GITLAB_CI'


pydocstyle:
  image: python:3
  stage: test
  script:
    - tox -e pydocstyle
  rules:
    # If `$FORCE_GITLAB_CI` is set, create a pipeline.
    - if: '$FORCE_GITLAB_CI'


doc8:
  image: python:3
  stage: test
  script:
    - tox -e doc8
  rules:
    # If `$FORCE_GITLAB_CI` is set, create a pipeline.
    - if: '$FORCE_GITLAB_CI'


# ###########################
# Build stage
# ###########################

## create badges
#badges:
#  image: python:3
#  stage: build
#  script:
#    - tail -n 1 coverage.out > cov_total.out
#    - PERCENT=$(awk '{printf "%.2f", ($2-$3)/$2*100}' cov_total.out)
#    - python badges.py -cov=$PERCENT
#    - ls
#  artifacts:
#    paths:
#      - coverage.svg
#  allow_failure: false

# Run pytest + coverage and create html report (pytest_report.html)
coverage:
  image: python:3.8
  stage: build
  script:
    - pip install pytest pytest-cov pytest-html pytest-httpserver
    - pip install -r requirements.txt
    - pip install -e ".[all]"
    - pytest --cov=pyxel --cov-report= --cov-report=html --html=pytest_report.html --self-contained-html --color=yes --full-trace --showlocals --verbose
    - coverage report > coverage.out
  artifacts:
    paths:
      - htmlcov
      - pytest_report.html
      - coverage.out
  rules:
    # If `$FORCE_GITLAB_CI` is set, create a pipeline.
    - if: '$FORCE_GITLAB_CI'

# Scan sourcecode for licenses, copyrights & dependencies
# experimental, latest version
licenses-latest:
  image: python:3
  stage: build
  script:
    - tox -e licenses
  artifacts:
    paths:
      - license.html
  rules:
    # If `$FORCE_GITLAB_CI` is set, create a pipeline.
    - if: '$FORCE_GITLAB_CI'


# Generate the Sphinx documentation into 'doc/html'
doc:
  image: python:3.8
  stage: build
  script:
    - tox -e docs
    - python badges.py -doc="passed"
  artifacts:
    paths:
      - docs/html
      - documentation.svg
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
    - if: '$FORCE_GITLAB_CI'

#website:
#  image: python:3
#  stage: build
#  script:
#    - wget https://esa.gitlab.io/pyxel-website/pyxel-website.tar.gz
#    - tar -xzvf pyxel-website.tar.gz
#    - ls html
#  artifacts:
#    paths:
#       - html
#  rules:
#    - if: $CI_COMMIT_BRANCH == "master"


## Generate the Sphinx documentation into 'doc/html'
#doc:
#  image: python:3.6
#  stage: build
#  script:
#    - pip install -r docs/requirements-docs.txt
#    - pip install -r requirements.txt
#    - pip install -e ".[all]"
#    - pip install doc8
#    - export PYTHONPATH=$PWD
#    - doc8 docs/source
#    - sphinx-build docs/source docs/html -E -a -j 4
#    - python badges.py -doc="passed"
#  artifacts:
#    paths:
#      - docs/html
#      - documentation.svg
#  allow_failure: false
#  only:
#    - master

# See https://docs.gitlab.com/ee/user/packages/container_registry/#build-and-push-by-using-gitlab-cicd
# docker:
#   stage: build
#   image: docker
#   services:
#     - docker:dind
#   before_script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#   script:
#     - docker build -t $DOCKER_TEST_IMAGE .
#     - docker push $DOCKER_TEST_IMAGE
#   rules:
#     - if: $FULL_CI_CD
# #    - if: $CI_PIPELINE_SOURCE != "schedule"
#     - if: $CI_COMMIT_BRANCH != "master"
    

# docker_release:
#   stage: deploy
#   image: docker
#   before_script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#   script:
#     - docker pull $DOCKER_TEST_IMAGE
#     - docker tag $DOCKER_TEST_IMAGE $DOCKER_RELEASE_IMAGE
#     - docker push $DOCKER_RELEASE_IMAGE
#   rules:
#     - if: $FULL_CI_CD
# #    - if: $CI_PIPELINE_SOURCE != "schedule"
#     - if: $CI_COMMIT_BRANCH == "master"


# ###########################
# Deploy Stage
# ###########################

## Create the pages
#pages:
#  image: python:3
#  stage: deploy
#  script:
#    - mkdir public
#    - mv docs/html public/doc
#    - mv htmlcov public/coverage
#    - mv pytest_report.html public
#    # - mv pylint_report.html public
#    - mv documentation.svg public
#    - mv license.json public
#    - ls public
#  artifacts:
#    paths:
#      - public
#  allow_failure: false

# Create the pages
pages:
  image: python:3
  stage: deploy
  script:
    - mkdir public

    # Get the content of the blog
    - wget https://esa.gitlab.io/pyxel-website/pyxel-website.tar.gz
    - tar -xzvf pyxel-website.tar.gz
    - mv html/* public              # Generated by stage 'website'

    - mv docs/html public/doc       # Generated by stage 'doc'
    - mv documentation.svg public   # Generated by stage 'doc'
    - ls public
  artifacts:
    paths:
      - public
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
