variables:
  # Change pip's cache directory to be inside the project directory.
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache"

  # Set tags for docker images
  DOCKER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  DOCKER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest

stages:
  - test
  - build
  - deploy

before_script:
  - python -V
  - pip install tox
  - export TZ=Europe/Amsterdam
  - date

# Use for temporary storage for project dependencies(e.g. pypi packages...)
cache:
  paths:
    - .cache/

# ###########################
# Test Stage
# ###########################

# Run pytest for Python 3.7 without anaconda
python37:
  image: python:3.7
  stage: test
  script:
    - tox -e py37-extra_all
  rules:
    # If `$FORCE_GITLAB_CI` is set, create a pipeline.
    - if: '$FORCE_GITLAB_CI'

# Run pytest for Python 3.8 without anaconda
python38:
  image: python:3.8
  stage: test
  script:
    - tox -e py38-extra_all
  rules:
    # If `$FORCE_GITLAB_CI` is set, create a pipeline.
    - if: '$FORCE_GITLAB_CI'

# Run pytest for Python 3.8 without anaconda
python38_numpy119:
  image: python:3.8
  stage: test
  script:
    - tox -e py38-numpy119-extra_all
  rules:
    # If `$FORCE_GITLAB_CI` is set, create a pipeline.
    - if: '$FORCE_GITLAB_CI'


# Run mypy
mypy:
  image: python:3.9
  stage: test
  script:
    - tox -e mypy
  rules:
    # If `$FORCE_GITLAB_CI` is set, create a pipeline.
    - if: '$FORCE_GITLAB_CI'

flake8:
  image: python:3
  stage: test
  script:
    - tox -e flake8
  rules:
    # If `$FORCE_GITLAB_CI` is set, create a pipeline.
    - if: '$FORCE_GITLAB_CI'


pydocstyle:
  image: python:3
  stage: test
  script:
    - tox -e pydocstyle
  rules:
    # If `$FORCE_GITLAB_CI` is set, create a pipeline.
    - if: '$FORCE_GITLAB_CI'


doc8:
  image: python:3
  stage: test
  script:
    - tox -e doc8
  rules:
    # If `$FORCE_GITLAB_CI` is set, create a pipeline.
    - if: '$FORCE_GITLAB_CI'


# ###########################
# Build stage
# ###########################

# Run pytest + coverage and create html report (pytest_report.html)
coverage:
  image: python:3.8
  stage: build
  needs: []
  script:
    - pip install pytest pytest-cov pytest-html pytest-httpserver freezegun
    - pip install -r requirements.txt
    - pip install -e ".[all]"
    - pytest --cov=pyxel --cov-report= --cov-report=html --html=pytest_report.html --self-contained-html --color=yes --full-trace --showlocals --verbose
    - coverage report > coverage.out
  artifacts:
    paths:
      - htmlcov
      - pytest_report.html
      - coverage.out
  rules:
    # If `$FORCE_GITLAB_CI` is set, create a pipeline.
    - if: '$FORCE_GITLAB_CI'

# Scan sourcecode for licenses, copyrights & dependencies
# experimental, latest version
licenses-latest:
  image: python:3.9
  stage: build
  needs: []
  script:
    - tox -e licenses
  artifacts:
    paths:
      - license.html
  rules:
    # If `$FORCE_GITLAB_CI` is set, create a pipeline.
    - if: '$FORCE_GITLAB_CI'


# Generate the Sphinx documentation into 'doc/html'
doc:
  image: python:3.8
  stage: build
  needs: []
  script:
    - tox -e docs
    - python badges.py -doc="passed"
  artifacts:
    paths:
      - docs/html
      - documentation.svg
  rules:
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG != "" && $FORCE_GITLAB_CI'

doc_development:
  image: python:3.8
  stage: build
  needs: []
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'
  script:
    - tox -e docs
    - mv docs/html latest
  artifacts:
    paths:
      - latest
      - documentation.svg
  environment:
    name: development

doc_production:
  image: python:3.8
  stage: build
  needs: []
  rules:
    - if: '$CI_COMMIT_TAG'
  script:
    - tox -e docs
    - mv docs/html stable
  artifacts:
    paths:
      - stable
  environment:
    name: production


# ###########################
# Deploy Stage
# ###########################

# Create the pages
pages:
  image: python:3
  stage: deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG'
  script:
    - mkdir -p public/doc

    # Display the environment variables (for debugging)
    - export
    - ls

    # Generate 'documentation.svg'
    - python badges.py -doc="passed"

    # Get the content of the blog
    - wget https://esa.gitlab.io/pyxel-website/pyxel-website.tar.gz
    - tar -xzvf pyxel-website.tar.gz
    - mv html/* public                # Generated by stage 'website'

    # Prepare Python environment
    - pip install -r continuous_integration/scripts/requirements.txt

    # Download last stable documentation from environment 'production'
    # only if folder 'stable' and file 'artifacts.zip' do not exist
    - test -d stable || test -f artifacts.zip || python continuous_integration/scripts/download_last_environment_artifact.py

    # Unzip 'artifacts.zip' into folder 'stable'
    # only if folder 'stable' does not exist and file 'artifacts.zip' exists.
    - test -d stable || (test -f artifacts.zip && unzip artifacts.zip)

    # Move folder 'stable' to 'public/doc/stable'
    # only if folder 'stable' exists
    - test -d stable && mv stable public/doc/stable

    - mv latest public/doc/latest         # Generated by stage 'doc_development'
    - mv documentation.svg public
    - cp docs/_static/redirect.html public/doc/index.html

    - ls public

  artifacts:
    paths:
      - public
  allow_failure: false
