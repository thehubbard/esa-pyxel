#
# Notes: $CI_COMMIT_REF_NAME => master or branch-xyz
#

variables:
    PYPI_USER: SECURE
    PYPI_PASSWORD: SECURE
    CONTAINER_LATEST_IMAGE: gitlab.esa.int:4567/sci-fv/pyxel:latest

stages:
  - test
  - build
  - deploy


# ###########################
# Test Stage
# ###########################

# experimental
licenses-latest:
  image: debian:jessie-slim  # python:2.7
  stage: test  # build
  allow_failure: true
  script:
    - pwd
    - apt-get update
    - apt-get install python-dev libbz2-1.0 xz-utils zlib1g libxml2-dev libxslt1-dev
    - wget https://github.com/nexB/scancode-toolkit/archive/v2.9.8.tar.gz
    - tar -xvf v2.9.8.tar.gz
    - cd scancode-toolkit-2.9.8
    - ./scancode --help
#    - ./scancode --license --package --copyright --info --email --url . --html-app license_report.html        # latest version
    - ./scancode -n 4 --ignore *.fits . --html-app license_report2.html || echo 0      # latest version, EMPTY REPORT
#    - ./scancode . --html-app license_report.html
    - ls
  artifacts:
    paths:
      - license_report2_files
      - license_report2.html


# Run pytest + coverage and create html report (pytest_report.html)
anaconda3:
  image: continuumio/anaconda3
  stage: test
  script:
    - pip install pytest pytest-cov pytest-html
    - pip install -r requirements.txt
    - pip freeze
    - export PYTHONPATH=$PWD
    - pytest --cov=pyxel --cov-report= --cov-report=html --html=pytest_report.html --self-contained-html --color=yes --full-trace --showlocals --verbose
    - coverage report > coverage.out
    - tail -n 1 coverage.out > cov_total.out
    - PERCENT=$(awk '{printf "%.2f", ($2-$3)/$2*100}' cov_total.out)
    - python badges.py -cov=$PERCENT
    - ls
  artifacts:
    paths:
      - htmlcov
      - pytest_report.html
      - coverage.svg
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - htmlcov
      - pytest_report.html
      - coverage.svg
  allow_failure: false


# Run pytest for Python 3.7
python37:
  image: python:3.7
  stage: test
  script:
    - pip install pytest
    - pip install -r requirements.txt
    - pip freeze
    - pytest --color=yes --full-trace --showlocals --verbose
  allow_failure: false


# Run pytest for Python 3.6
python36:
  image: python:3.6
  stage: test
  script:
    - pip install pytest
    - pip install -r requirements.txt
    - pip freeze
    - pytest --color=yes --full-trace --showlocals --verbose
  allow_failure: false


## Run pytest for Python 3.5
#python35:
#  image: python:3.5
#  stage: test
#  script:
#    - pip install pytest
#    - pip install -r requirements.txt
#    - pip freeze
#    - pytest --color=yes --full-trace --showlocals --verbose
#  allow_failure: true


# Run mypy
mypy:
  image: continuumio/anaconda3
  stage: test
  script:
    - pip install mypy
    - mypy --ignore-missing-imports pyxel
  allow_failure: true


# Run pylint (with pytest) and generate HTML report
lint:
  image: python:3.6
  stage: test
  script:
    - pip install pytest-pylint pytest-html
    - pip install -r requirements.txt
    - pytest --pylint --color=yes --verbose --pylint-rcfile=pylint.cfg --html=pylint_report.html --self-contained-html -m pylint || echo 1
    - ls
  artifacts:
    paths:
      - pylint_report.html
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - pylint_report.html
  allow_failure: true  # false      # TODO


flake8:
  image: python:3.6
  stage: test
  script:
    - pip install flake8 flake8-docstrings pep8-naming
    - flake8 pyxel
  allow_failure: false


doc8:
  image: python:3.6
  stage: test
  script:
    - pip install sphinx doc8
    - doc8 docs/source
  allow_failure: false


# ###########################
# Build stage
# ###########################

# Scan sourcecode for licenses, copyrights & dependencies
licenses:
  image: python:2.7.14
  stage: build
  allow_failure: true
  script:
    - pwd
    - pip install scancode-toolkit==2.2.1    # worked
#    - pip install scancode-toolkit==2.9.2
#    - pip install scancode-toolkit        # not worked:  EMPTY REPORT
    - scancode --help            # todo: use latest release when it will be available !
#    - scancode --license --package --copyright --info --email --url . --html-app license_report.html        # latest version
#    - scancode --license --package --copyright --info --email --url --format html-app . license_report.html   # v2.2.1
#    - scancode --license --package --copyright --info --email --url --format html . license_report.html      # v2.2.1
#    - scancode -n 4 --ignore *.fits --format json --diag . license_report.json || echo 0      # v2.2.1   worked
    - scancode -n 4 --ignore *.fits --format html-app --diag . license_report.html || echo 0      # v2.2.1   worked
#    - scancode -n 4 --ignore *.fits . --html-app license_report.html || echo 0      # latest version, EMPTY REPORT
#    - scancode . --html-app license_report.html
    - ls
  artifacts:
    paths:
      - license_report_files
      - license_report.html
#  only:
#    - master
#    - tags

# Generate the Sphinx documentation into 'doc/html'
doc:
  image: continuumio/anaconda3
  stage: build
  script:
    - pip install sphinx sphinx_rtd_theme
    - pip install -r requirements.txt
    - export PYTHONPATH=$PWD
    - sphinx-build docs/source docs/html
    - ls
  artifacts:
    paths:
      - docs/html
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - docs/html
  allow_failure: false


docker:
  stage: build
  image: docker:dind
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN gitlab.esa.int:4567
    - docker build --pull -t $CONTAINER_LATEST_IMAGE .
    - docker push $CONTAINER_LATEST_IMAGE
  allow_failure: false


# Create wheel file
#deploy:
#  image: python:3.6
#  stage: deploy
#  environment: deploy
#  script:
#    - pip install wheel setuptools
#    - python setup.py bdist_wheel
#  artifacts:
#    paths:
#      - dist


# ###########################
# Deploy Stage
# ###########################

# Create the pages
pages:
  image: python:3.6
  stage: deploy
  script:
    - pip install docutils pygments
    - rst2html.py --stylesheet=README.css pages.rst pages.html
    - mkdir public
    - mv coverage.svg public
    - mv docs/html public/doc
    - mv pages.html public/index.html
    - mv htmlcov public/coverage
    - mv pytest_report.html public
    - mv pylint_report.html public
    - mv license_report.html public
    - mv license_report_files public
    - mv license_report2.html public
    - mv license_report2_files public
    - ls public
  artifacts:
    paths:
      - public
  allow_failure: false
#  only:
#    - tags

kubernetes:
  stage: deploy
  image: docker:dind
  environment:
    name: development
  allow_failure: true
  script:
    - apk add --no-cache curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.10.7/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl
    - kubectl --kubeconfig $KUBECONFIG --ignore-not-found=true delete -f kubernetes.yaml
    - sleep 30
    - kubectl --kubeconfig $KUBECONFIG apply -f kubernetes.yaml
#    - echo "Because we are not tagging the images just do a change in the deployment to force a pull"
#    - kubectl --kubeconfig $KUBECONFIG patch deployment pyxel-deployment -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}"
#    - kubectl --kubeconfig $KUBECONFIG get pods


# Upload to pypi
# Reference: http://samb.io/blog/2016/devops/python/gitlab/continuous-deployment/continuous-deployment-to-python-packaging
#deploy_pypi:
#  image: python:3.6
#  stage: deploy
#  environment: deploy
#  script:   # Configure the PyPI credentials, then push the package, and cleanup the creds.
#    - pip install -r requirements.txt
#    - echo "[server-login]" >> ~/.pypirc
#    - echo "repository=http://lab-linux-server.estec.esa.int/pypi/" >> ~/.pypirc
#    - echo "username=" ${PYPI_USER} >> ~/.pypirc
#    - echo "password=" ${PYPI_PASSWORD} >> ~/.pypirc
#    - python setup.py check bdist_wheel upload # This will fail if your creds are bad.
#    - echo "" > ~/.pypirc && rm ~/.pypirc  # If the above fails, this won't run.
#  only:
#    - /^v\d+\.\d+\.\d+([abc]\d*)?$/  # PEP-440 compliant version (tags)
#  except:
#    - branches
#  only:
#    - tags

#cleanup_pypirc:
#   stage: cleanup
##   when: always   # this is important; run even if preceding stages failed.
#   script:
#    - rm -vf ~/.pypirc  # we don't want to leave these around, but GitLab may clean up anyway.