################
# Pyxel configuration file for CCD detectors
# David Lucsanyi
################

calibration:

  mode:  pipeline
  result_type:      image
  result_fit_range: [0, 20, 0, 20]

  target_data_path: ['tests/data/calibrate-data.fits']     #  <*.npy> <*.fits> <ascii>
  target_fit_range: [10, 30, 10, 30]

  fitness_function:
    func: pyxel.calibration.fitness.sum_of_abs_residuals
    arguments:

  pygmo_seed: 1111
  algorithm:
    type: sade
    generations: 1
    population_size: 10
    variant: 2

  parameters:
    - key:  detector.characteristics.pre_amplification
      values: _
      logarithmic: false
      boundaries: [1., 10.]
    - key:  pipeline.charge_transfer.cdm.arguments.trap_release_times
      values: [_, _, _, _]
      logarithmic: true
      boundaries: [1.e-3, 2.]
    - key:  pipeline.charge_transfer.cdm.arguments.trap_densities
      values: [_, _, _, _]
      logarithmic: false
      boundaries: [1.e-2, 1.e+1]
    - key:  pipeline.charge_transfer.cdm.arguments.sigma
      values: [_, _, _, _]
      logarithmic: true
      boundaries: [1.e-20,  1.e-15]
    - key:  pipeline.charge_transfer.cdm.arguments.beta
      values: _
      logarithmic: false
      boundaries: [0., 1.]
    - key:  pipeline.charge_measurement.output_node_noise.arguments.std_deviation
      values: _
      logarithmic: true
      boundaries: [10., 200.]
    - key:  detector.environment.temperature
      values: _
      logarithmic: false
      boundaries: [100., 300.]

  outputs:
    output_folder: "tests/temp/outputs"

ccd_detector:

  geometry:
    row:   100                    # compulsory
    col:   100                    # compulsory
    pixel_vert_size: 10.          # um
    pixel_horz_size: 10.          # um

  environment:
    temperature: 100

  characteristics:
    quantum_efficiency: 0.5                 # -
    charge_to_volt_conversion: 1.0e-6              # V/e
    pre_amplification: 100                 # V/V
    adc_bit_resolution: 16
    adc_voltage_range: [ 0., 10. ]
    full_well_capacity: 1000000               # e

pipeline:

  # -> photon
  photon_collection:
    -
      name: load_image
      func: pyxel.models.photon_collection.load_image
      enabled: true
      arguments:
        image_file: 'tests/data/calibrate-data.fits'
        position: [0, 0]
        convert_to_photons: true
        bit_resolution: 16
    -
      name: illumination
      func: pyxel.models.photon_collection.illumination
      enabled: false
      arguments:
        level:

  # photon -> charge
  charge_generation:
    -
      name: photoelectrons
      func: pyxel.models.charge_generation.simple_conversion
      enabled: true
      arguments:
          binomial_sampling: false

  # charge -> charge
  charge_collection:
    -
      name: simple_collection
      func: pyxel.models.charge_collection.simple_collection
      enabled: true

  # charge -> charge
  charge_transfer:
    -
      name: cdm
      func: pyxel.models.charge_transfer.cdm
      enabled: true
      arguments:
        direction: "parallel"
        trap_release_times: [0.01]
        trap_densities: [1.]
        sigma: [1.]
        beta: 0.3
        max_electron_volume: 1.6200e-10
        transfer_period: 9.4722e-04
        charge_injection: false

  # charge -> signal
  charge_measurement:
    -
      name: simple_measurement
      func: pyxel.models.charge_measurement.simple_measurement
      enabled: true
    -
      name: output_node_noise
      func: pyxel.models.charge_measurement.output_node_noise
      enabled: false
      arguments:
        std_deviation: 0.00001

  # signal -> image
  readout_electronics:
    -
      name: simple_amplifier
      func: pyxel.models.readout_electronics.simple_amplifier
      enabled: true
    -
      name: simple_adc
      func: pyxel.models.readout_electronics.simple_adc
      enabled: true
